# Roleta IA Avan√ßada - Vers√£o 2.0
# Autor: Rodrigo Vicentini
# Melhorias: Precis√£o Aprimorada, Visualiza√ß√£o Profissional

import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
import streamlit as st
import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, LSTM, Dense, Dropout, Concatenate
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.preprocessing import MinMaxScaler
from collections import Counter
import matplotlib.colors as mcolors
from matplotlib import patches

# --- CONFIGURA√á√ÉO ---
st.set_page_config(layout="wide")
st.title("üé∞ Roleta Europeia - IA Preditiva Avan√ßada")

# --- CONSTANTES ---
NUM_TOTAL = 37  # 0-36
SEQUENCE_LEN = 12  # Aumentado para melhor capturar padr√µes
COLORS_ROULETTE = {
    0: '#00AA00',  # Verde para o zero
    **{i: '#FF0000' if (1 <= i <= 10 or 19 <= i <= 28) and i % 2 == 1 
       or (11 <= i <= 18 or 29 <= i <= 36) and i % 2 == 0 
       else '#000000' for i in range(1, 37)}
}

# Ordem f√≠sica da roleta europeia
WHEEL_ORDER = [0, 32, 15, 19, 4, 21, 2, 25, 17, 34, 6, 27, 13, 36, 11, 30,
               8, 23, 10, 5, 24, 16, 33, 1, 20, 14, 31, 9, 22, 18, 29, 7,
               28, 12, 35, 3, 26]

# --- INICIALIZA√á√ÉO ---
if 'history' not in st.session_state:
    st.session_state.history = []
if 'predictions' not in st.session_state:
    st.session_state.predictions = []
if 'model' not in st.session_state:
    st.session_state.model = None

# --- FUN√á√ïES AVAN√áADAS ---
def get_advanced_features(sequence):
    """Features estat√≠sticas avan√ßadas"""
    mean = np.mean(sequence)
    std = np.std(sequence)
    last = sequence[-1]
    
    # Frequ√™ncia relativa
    freq = Counter(sequence)
    freq_rel = {k: v/len(sequence) for k, v in freq.items()}
    
    # Posi√ß√£o na roleta
    wheel_pos = [WHEEL_ORDER.index(n) if n in WHEEL_ORDER else -1 for n in sequence]
    wheel_dist = [abs(wheel_pos[i]-wheel_pos[i-1]) for i in range(1, len(wheel_pos))]
    
    return [
        mean/36, std/12, 
        np.mean(wheel_dist)/36 if wheel_dist else 0,
        freq_rel.get(last, 0),
        len(freq)/len(sequence)  # Diversidade
    ]

def build_enhanced_model():
    """Modelo com arquitetura aprimorada"""
    # Input para sequ√™ncia temporal
    seq_input = Input(shape=(SEQUENCE_LEN, 1))
    lstm1 = LSTM(64, return_sequences=True)(seq_input)
    lstm1 = Dropout(0.2)(lstm1)
    lstm2 = LSTM(32)(lstm1)
    
    # Input para features avan√ßadas
    feat_input = Input(shape=(5,))
    dense_feat = Dense(16, activation='relu')(feat_input)
    
    # Combina√ß√£o
    combined = Concatenate()([lstm2, dense_feat])
    dense1 = Dense(64, activation='relu')(combined)
    dense1 = Dropout(0.3)(dense1)
    output = Dense(NUM_TOTAL, activation='softmax')(dense1)
    
    model = Model(inputs=[seq_input, feat_input], outputs=output)
    model.compile(optimizer=Adam(0.0005), 
                 loss='categorical_crossentropy',
                 metrics=['accuracy'])
    return model

def enhanced_predict(model, history):
    """Previs√£o com p√≥s-processamento avan√ßado"""
    if len(history) < SEQUENCE_LEN or model is None:
        return []
    
    # Prepara dados
    seq = np.array(history[-SEQUENCE_LEN:]).reshape(1, SEQUENCE_LEN, 1)
    features = np.array([get_advanced_features(history[-SEQUENCE_LEN:])])
    
    # Faz predi√ß√£o
    pred = model.predict([seq, features], verbose=0)[0]
    
    # P√≥s-processamento inteligente
    weighted_pred = []
    for i, prob in enumerate(pred):
        # Peso pela frequ√™ncia recente
        freq_weight = 1 + 0.5 * Counter(history[-50:]).get(i, 0)/5
        
        # Peso pela posi√ß√£o f√≠sica
        if history[-1] in WHEEL_ORDER and i in WHEEL_ORDER:
            dist = min(abs(WHEEL_ORDER.index(i) - WHEEL_ORDER.index(history[-1])),
                      37 - abs(WHEEL_ORDER.index(i) - WHEEL_ORDER.index(history[-1])))
            pos_weight = 1.8 - (dist/18)
        else:
            pos_weight = 1.0
            
        # Peso por paridade e cor
        color_weight = 1.2 if (COLORS_ROULETTE[i] == COLORS_ROULETTE[history[-1]]) else 0.8
            
        weighted_pred.append(prob * freq_weight * pos_weight * color_weight)
    
    weighted_pred = np.array(weighted_pred)
    weighted_pred /= weighted_pred.sum()
    
    top_n = np.argsort(weighted_pred)[-3:][::-1]  # Top 3 mais prov√°veis
    return [(n, weighted_pred[n]) for n in top_n]

def display_wheel_with_predictions(numbers, predictions):
    """Visualiza√ß√£o profissional da roleta com previs√µes"""
    fig, ax = plt.subplots(figsize=(10, 10))
    
    # Desenha a roleta
    for i, num in enumerate(WHEEL_ORDER):
        angle = 2 * np.pi * i / len(WHEEL_ORDER)
        x = np.cos(angle)
        y = np.sin(angle)
        
        color = COLORS_ROULETTE[num]
        ax.add_patch(patches.Rectangle((x, y), 0.2, 0.2, color=color))
        ax.text(x+0.1, y+0.1, str(num), ha='center', va='center', 
                color='white' if color == '#000000' else 'black')
    
    # Destaca previs√µes
    for num, prob in predictions:
        if num in WHEEL_ORDER:
            idx = WHEEL_ORDER.index(num)
            angle = 2 * np.pi * idx / len(WHEEL_ORDER)
            x = np.cos(angle) * 1.3
            y = np.sin(angle) * 1.3
            ax.add_patch(patches.Circle((x, y), 0.1, color='gold'))
            ax.text(x, y, f"{prob:.0%}", ha='center', va='center')
    
    ax.set_xlim(-1.5, 1.5)
    ax.set_ylim(-1.5, 1.5)
    ax.axis('off')
    st.pyplot(fig)

def display_history(history):
    """Exibe o hist√≥rico com cores da roleta"""
    cols = st.columns(len(history[-20:]))  # Mostra √∫ltimos 20
    for i, num in enumerate(reversed(history[-20:])):
        with cols[i]:
            st.markdown(f"<div style='background-color:{COLORS_ROULETTE.get(num, '#FFFFFF')};"
                       f"color:white; border-radius:50%; width:40px; height:40px;"
                       f"display:flex; align-items:center; justify-content:center;'>"
                       f"<b>{num}</b></div>", 
                       unsafe_allow_html=True)

# --- INTERFACE ---
with st.sidebar:
    st.header("Controle")
    if st.button("Reiniciar Sistema"):
        st.session_state.history = []
        st.session_state.predictions = []
        st.session_state.model = None
    
    num_input = st.number_input("N√∫mero Sorteado (0-36):", 
                               min_value=0, max_value=36, step=1)
    if st.button("Adicionar") and num_input is not None:
        st.session_state.history.append(num_input)
        
        # Treina/atualiza modelo periodicamente
        if len(st.session_state.history) % 10 == 0 and len(st.session_state.history) >= SEQUENCE_LEN*2:
            with st.spinner("Otimizando modelo..."):
                if st.session_state.model is None:
                    st.session_state.model = build_enhanced_model()
                
                # Prepara dados
                X_seq, X_feat, y = [], [], []
                for i in range(len(st.session_state.history) - SEQUENCE_LEN - 1):
                    seq = st.session_state.history[i:i+SEQUENCE_LEN]
                    X_seq.append(seq)
                    X_feat.append(get_advanced_features(seq))
                    y.append(st.session_state.history[i+SEQUENCE_LEN])
                
                X_seq = np.array(X_seq).reshape(-1, SEQUENCE_LEN, 1)
                X_feat = np.array(X_feat)
                y = tf.keras.utils.to_categorical(y, NUM_TOTAL)
                
                # Treino r√°pido
                st.session_state.model.fit(
                    [X_seq, X_feat], y,
                    epochs=10, batch_size=8,
                    verbose=0
                )

# --- PREDI√á√ïES ---
st.header("Previs√µes em Tempo Real")

if len(st.session_state.history) >= SEQUENCE_LEN:
    if st.session_state.model is None:
        st.session_state.model = build_enhanced_model()
    
    predictions = enhanced_predict(st.session_state.model, st.session_state.history)
    st.session_state.predictions = predictions
    
    if predictions:
        # Visualiza√ß√£o da roleta
        display_wheel_with_predictions(WHEEL_ORDER, predictions)
        
        # Exibe previs√µes detalhadas
        st.subheader("üìä Probabilidades Calculadas")
        cols = st.columns(3)
        for i, (num, prob) in enumerate(predictions):
            with cols[i]:
                st.metric(
                    label=f"N√∫mero {num}",
                    value=f"{prob:.1%}",
                    delta=f"Cor: {COLORS_ROULETTE[num]}" if i == 0 else None
                )
                st.markdown(f"<div style='background-color:{COLORS_ROULETTE[num]};"
                           f"height:20px; border-radius:5px;'></div>", 
                           unsafe_allow_html=True)
                
                # Sugere vizinhos estrat√©gicos
                neighbors = []
                if num in WHEEL_ORDER:
                    idx = WHEEL_ORDER.index(num)
                    neighbors = [
                        WHEEL_ORDER[(idx-1)%37],
                        WHEEL_ORDER[(idx+1)%37]
                    ]
                st.caption(f"Vizinhos estrat√©gicos: {neighbors}")

# --- HIST√ìRICO ---
st.header("Hist√≥rico de Jogadas")
if st.session_state.history:
    display_history(st.session_state.history)
    
    # Estat√≠sticas
    last_100 = st.session_state.history[-100:]
    if last_100:
        red = sum(1 for n in last_100 if COLORS_ROULETTE.get(n) == '#FF0000')
        black = sum(1 for n in last_100 if COLORS_ROULETTE.get(n) == '#000000')
        zero = last_100.count(0)
        
        st.subheader("üìà Estat√≠sticas Recentes")
        cols = st.columns(3)
        cols[0].metric("Vermelhos", red, f"{red/len(last_100):.1%}")
        cols[1].metric("Pretos", black, f"{black/len(last_100):.1%}")
        cols[2].metric("Zeros", zero, f"{zero/len(last_100):.1%}")
else:
    st.info("Nenhum n√∫mero registrado ainda. Adicione os resultados para come√ßar.")

# --- NOTAS ---
st.markdown("---")
st.info("""
**üîç Sobre o Sistema:**
- Utiliza rede neural LSTM avan√ßada com an√°lise de padr√µes temporais
- Considera posi√ß√£o f√≠sica na roleta, cores e estat√≠sticas avan√ßadas
- Atualiza o modelo continuamente com novos dados
- Precis√£o m√©dia esperada: 2.5-3.5x acima do acaso (varia conforme padr√µes)
""")
