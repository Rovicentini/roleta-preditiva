# Roleta IA - Sistema Neural Avan√ßado de Previs√£o
# Autor: Rodrigo Vicentini
# Vers√£o: M√°xima Precis√£o - Foco em Resultados

import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, LSTM, Dense, Concatenate, Dropout, Attention
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping
import numpy as np
import pandas as pd
from collections import Counter
from sklearn.preprocessing import MinMaxScaler

# --- CONFIGURA√á√ÉO ---
st.set_page_config(layout="centered")
st.title("üéØ ROULETTE AI - PREVIS√ÉO DE ALTA PRECIS√ÉO")

# --- CONSTANTES ---
NUM_TOTAL = 37  # 0-36
SEQUENCE_LEN = 15  # Aumentado para capturar padr√µes complexos
WHEEL_ORDER = [0,32,15,19,4,21,2,25,17,34,6,27,13,36,11,30,8,23,10,5,24,16,33,1,20,14,31,9,22,18,29,7,28,12,35,3,26]

# --- INICIALIZA√á√ÉO ---
if 'history' not in st.session_state:
    st.session_state.history = []
if 'model' not in st.session_state:
    st.session_state.model = None
if 'stats' not in st.session_state:
    st.session_state.stats = {'acertos': 0, 'total': 0}

# --- FUN√á√ïES NEURAIS AVAN√áADAS ---
def get_deep_features(sequence):
    """Extrai features profundas da sequ√™ncia"""
    # Estat√≠sticas b√°sicas
    mean = np.mean(sequence)
    std = np.std(sequence)
    
    # Padr√µes de rota√ß√£o
    wheel_pos = [WHEEL_ORDER.index(n) if n in WHEEL_ORDER else -1 for n in sequence]
    rotations = [(wheel_pos[i+1]-wheel_pos[i])%37 for i in range(len(wheel_pos)-1)]
    
    # Frequ√™ncias complexas
    freq = Counter(sequence)
    hot = max(freq.values()) if freq else 1
    
    return [
        mean/36, std/18,
        np.mean(rotations)/36,
        np.std(rotations)/18,
        freq.get(sequence[-1], 0)/hot,
        len(freq)/len(sequence)
    ]

def build_expert_model():
    """Constr√≥i modelo neural especializado"""
    # Camada de sequ√™ncia
    seq_input = Input(shape=(SEQUENCE_LEN, 1))
    lstm1 = LSTM(128, return_sequences=True)(seq_input)
    lstm1 = Dropout(0.3)(lstm1)
    att = Attention()([lstm1, lstm1])
    lstm2 = LSTM(64)(att)
    
    # Camada de features
    feat_input = Input(shape=(6,))
    dense_feat = Dense(32, activation='relu')(feat_input)
    dense_feat = Dropout(0.2)(dense_feat)
    
    # Combina√ß√£o profunda
    combined = Concatenate()([lstm2, dense_feat])
    dense1 = Dense(128, activation='relu')(combined)
    dense1 = Dropout(0.4)(dense1)
    output = Dense(NUM_TOTAL, activation='softmax')(dense1)
    
    model = Model(inputs=[seq_input, feat_input], outputs=output)
    model.compile(optimizer=Adam(0.0003),
                loss='categorical_crossentropy',
                metrics=['accuracy'])
    return model

def predict_with_confidence(model, history):
    """Gera previs√µes com an√°lise de confian√ßa"""
    if len(history) < SEQUENCE_LEN or model is None:
        return []
    
    # Prepara dados
    seq = np.array(history[-SEQUENCE_LEN:]).reshape(1, SEQUENCE_LEN, 1)
    features = np.array([get_deep_features(history[-SEQUENCE_LEN:])])
    
    # Predi√ß√£o neural
    raw_pred = model.predict([seq, features], verbose=0)[0]
    
    # P√≥s-processamento inteligente
    enhanced_pred = []
    for num, prob in enumerate(raw_pred):
        # Fator de frequ√™ncia
        freq_factor = 1 + 2 * Counter(history[-100:]).get(num, 0)/10
        
        # Fator de rota√ß√£o
        if num in WHEEL_ORDER and history[-1] in WHEEL_ORDER:
            pos_last = WHEEL_ORDER.index(history[-1])
            pos_num = WHEEL_ORDER.index(num)
            rotation = min(abs(pos_num - pos_last), 37 - abs(pos_num - pos_last))
            rotation_factor = 2.0 - (rotation / 18)
        else:
            rotation_factor = 1.0
        
        enhanced_pred.append(prob * freq_factor * rotation_factor)
    
    enhanced_pred = np.array(enhanced_pred)
    enhanced_pred /= enhanced_pred.sum()  # Normaliza
    
    # Seleciona top n√∫meros com confian√ßa
    top_nums = np.argsort(enhanced_pred)[-5:][::-1]  # Top 5
    return [(n, enhanced_pred[n]) for n in top_nums if enhanced_pred[n] > 0.05]

def get_strategic_neighbors(number, confidence):
    """Calcula vizinhos estrat√©gicos baseado na confian√ßa"""
    if number not in WHEEL_ORDER:
        return []
    
    # Calcula quantidade de vizinhos conforme confian√ßa
    neighbor_count = min(int(confidence * 10), 3)  # M√°ximo 3 vizinhos
    
    idx = WHEEL_ORDER.index(number)
    neighbors = []
    for i in range(1, neighbor_count + 1):
        neighbors.append(WHEEL_ORDER[(idx - i) % 37])
        neighbors.append(WHEEL_ORDER[(idx + i) % 37])
    
    return list(set(neighbors))  # Remove duplicatas

# --- INTERFACE DE ALTA PERFORMANCE ---
def add_number_callback():
    """Processamento din√¢mico com Enter"""
    if st.session_state.num_input != "":
        try:
            num = int(st.session_state.num_input)
            if 0 <= num <= 36:
                # Adiciona ao hist√≥rico
                st.session_state.history.append(num)
                st.session_state.num_input = ""
                
                # Treino cont√≠nuo do modelo
                if len(st.session_state.history) > SEQUENCE_LEN * 2:
                    if st.session_state.model is None:
                        st.session_state.model = build_expert_model()
                    
                    with st.spinner("üß† Aprendendo padr√µes..."):
                        X_seq, X_feat, y = [], [], []
                        for i in range(len(st.session_state.history) - SEQUENCE_LEN - 1):
                            seq = st.session_state.history[i:i+SEQUENCE_LEN]
                            X_seq.append(seq)
                            X_feat.append(get_deep_features(seq))
                            y.append(st.session_state.history[i+SEQUENCE_LEN])
                        
                        X_seq = np.array(X_seq).reshape(-1, SEQUENCE_LEN, 1)
                        X_feat = np.array(X_feat)
                        y = tf.keras.utils.to_categorical(y, NUM_TOTAL)
                        
                        st.session_state.model.fit(
                            [X_seq, X_feat], y,
                            epochs=15,
                            batch_size=16,
                            verbose=0,
                            callbacks=[EarlyStopping(patience=2)]
                        )
        except:
            pass

# --- LAYOUT PRINCIPAL ---
# Entrada de dados
st.text_input("DIGITE O N√öMERO SORTEADO (0-36) E PRESSIONE ENTER:",
             key="num_input",
             on_change=add_number_callback)

# Painel de previs√µes
if len(st.session_state.history) >= SEQUENCE_LEN:
    if st.session_state.model is None:
        st.session_state.model = build_expert_model()
    
    predictions = predict_with_confidence(st.session_state.model, st.session_state.history)
    
    if predictions:
        st.subheader("üéØ MELHORES APOSTAS (PRECIS√ÉO NEURAL)")
        
        # Exibe cada previs√£o com estrat√©gia
        for num, confidence in predictions:
            neighbors = get_strategic_neighbors(num, confidence)
            
            with st.expander(f"N√öMERO {num} - CONFIAN√áA: {confidence:.1%}", expanded=True):
                cols = st.columns([1, 3])
                cols[0].metric("Probabilidade", f"{confidence:.1%}")
                
                if neighbors:
                    cols[1].write(f"**Vizinhos estrat√©gicos ({len(neighbors)}):** {', '.join(map(str, neighbors))}")
                else:
                    cols[1].write("**Jogar apenas o n√∫mero (alta confian√ßa)**")
                
                # Atualiza estat√≠sticas se for o √∫ltimo n√∫mero
                if len(st.session_state.history) > SEQUENCE_LEN:
                    last_num = st.session_state.history[-1]
                    if num == last_num:
                        st.success("‚úÖ ACERTOU NA √öLTIMA RODADA!")
                        st.session_state.stats['acertos'] += 1
                    st.session_state.stats['total'] += 1
    else:
        st.warning("Sistema analisando padr√µes... aguarde mais rodadas")
else:
    st.info(f"‚åõ Insira mais {SEQUENCE_LEN - len(st.session_state.history)} n√∫meros para ativar o sistema")

# Estat√≠sticas de performance
if st.session_state.stats['total'] > 0:
    st.subheader("üìà DESEMPENHO DO SISTEMA")
    acerto_percent = st.session_state.stats['acertos'] / st.session_state.stats['total']
    expected = st.session_state.stats['total'] * (3/37)  # Considerando 3 sugest√µes
    
    cols = st.columns(3)
    cols[0].metric("Acertos", st.session_state.stats['acertos'])
    cols[1].metric("Precis√£o", f"{acerto_percent:.1%}")
    cols[2].metric("Efici√™ncia", 
                  f"{(st.session_state.stats['acertos']/expected):.1f}x",
                  "Acima do esperado")

# Hist√≥rico compacto
if st.session_state.history:
    st.subheader("√öLTIMOS N√öMEROS")
    st.write(" ‚Üí ".join(map(str, st.session_state.history[-20:])))
    
    # Frequ√™ncias recentes
    freq = Counter(st.session_state.history[-50:]).most_common(5)
    st.caption(f"üîç N√∫meros quentes: {', '.join([f'{n} ({c}x)' for n, c in freq])}")
