import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
import streamlit as st
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, LSTM, Dense, Concatenate, Dropout, Attention, BatchNormalization
from tensorflow.keras.optimizers import Nadam
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from tensorflow.keras.regularizers import l2
from collections import Counter
from sklearn.preprocessing import MinMaxScaler

# Configura√ß√£o do TensorFlow para m√°xima performance
tf.config.optimizer.set_jit(True)
physical_devices = tf.config.list_physical_devices('GPU')
if physical_devices:
    tf.config.experimental.set_memory_growth(physical_devices[0], True)

# --- CONSTANTES AVAN√áADAS ---
NUM_TOTAL = 37  # 0-36
SEQUENCE_LEN = 20  # Janela maior para capturar padr√µes complexos
WHEEL_ORDER = [0,32,15,19,4,21,2,25,17,34,6,27,13,36,11,30,8,23,10,5,24,16,33,1,20,14,31,9,22,18,29,7,28,12,35,3,26]
WHEEL_DISTANCE = [[min(abs(i-j), 37-abs(i-j)) for j in range(37)] for i in range(37)]

# --- INICIALIZA√á√ÉO DO ESTADO ---
if 'history' not in st.session_state:
    st.session_state.history = []
if 'model' not in st.session_state:
    st.session_state.model = None
if 'stats' not in st.session_state:
    st.session_state.stats = {'acertos': 0, 'total': 0, 'streak': 0, 'max_streak': 0}

# --- ARQUITETURA NEURAL PROFUNDA ---
def build_deep_learning_model():
    """Constr√≥i um modelo neural de √∫ltima gera√ß√£o para previs√£o de roleta"""
    # Camada de entrada para sequ√™ncia temporal
    seq_input = Input(shape=(SEQUENCE_LEN, 1), name='sequence_input')
    
    # Rede LSTM profunda com aten√ß√£o
    lstm1 = LSTM(256, return_sequences=True, 
                kernel_regularizer=l2(0.001),
                recurrent_regularizer=l2(0.001))(seq_input)
    lstm1 = BatchNormalization()(lstm1)
    lstm1 = Dropout(0.4)(lstm1)
    
    lstm2 = LSTM(128, return_sequences=True)(lstm1)
    lstm2 = BatchNormalization()(lstm2)
    
    # Mecanismo de aten√ß√£o
    attention = Attention(use_scale=True)([lstm2, lstm2])
    lstm3 = LSTM(64)(attention)
    
    # Camada para features avan√ßadas
    feat_input = Input(shape=(8,), name='features_input')
    dense_feat = Dense(64, activation='swish')(feat_input)
    dense_feat = BatchNormalization()(dense_feat)
    dense_feat = Dropout(0.3)(dense_feat)
    
    # Combina√ß√£o profunda
    combined = Concatenate()([lstm3, dense_feat])
    
    # Camadas densas profundas
    dense1 = Dense(256, activation='swish', 
                  kernel_regularizer=l2(0.001))(combined)
    dense1 = BatchNormalization()(dense1)
    dense1 = Dropout(0.5)(dense1)
    
    dense2 = Dense(128, activation='swish')(dense1)
    dense2 = BatchNormalization()(dense2)
    
    # Sa√≠da com softmax temperature
    output = Dense(NUM_TOTAL, activation='softmax')(dense2)
    
    model = Model(inputs=[seq_input, feat_input], outputs=output)
    
    # Otimizador avan√ßado com warmup
    optimizer = Nadam(learning_rate=0.0005, 
                     clipnorm=1.0,
                     beta_1=0.9, 
                     beta_2=0.999)
    
    model.compile(optimizer=optimizer,
                 loss='categorical_crossentropy',
                 metrics=['accuracy', 
                         tf.keras.metrics.TopKCategoricalAccuracy(k=3)])
    return model

def get_advanced_features(sequence):
    """Extrai features estat√≠sticas avan√ßadas com f√≠sica da roleta"""
    if len(sequence) < 2:
        return [0]*8
    
    # Estat√≠sticas b√°sicas
    mean = np.mean(sequence)
    std = np.std(sequence)
    last = sequence[-1]
    second_last = sequence[-2]
    
    # Din√¢mica da roleta
    if last in WHEEL_ORDER and second_last in WHEEL_ORDER:
        last_pos = WHEEL_ORDER.index(last)
        second_last_pos = WHEEL_ORDER.index(second_last)
        wheel_speed = (last_pos - second_last_pos) % 37
        deceleration = abs(wheel_speed - ((second_last_pos - WHEEL_ORDER.index(sequence[-3])) % 37) if len(sequence) > 2 else 0
    else:
        wheel_speed = 0
        deceleration = 0
    
    # Padr√µes de repeti√ß√£o
    freq = Counter(sequence)
    hot_number = max(freq.values()) if freq else 1
    cold_number = min(freq.values()) if freq else 0
    
    return [
        mean/36,  # Normalizado
        std/18,
        wheel_speed/36,
        deceleration/36,
        freq.get(last, 0)/hot_number,
        (hot_number - cold_number)/len(sequence),
        len(freq)/len(sequence),  # Diversidade
        1 if last == second_last else 0  # Repeti√ß√£o
    ]

def predict_next_numbers(model, history):
    """Gera previs√µes com an√°lise de confian√ßa avan√ßada"""
    if len(history) < SEQUENCE_LEN or model is None:
        return []
    
    # Prepara dados de entrada
    seq = np.array(history[-SEQUENCE_LEN:]).reshape(1, SEQUENCE_LEN, 1)
    features = np.array([get_advanced_features(history[-SEQUENCE_LEN:])])
    
    # Predi√ß√£o neural
    raw_pred = model.predict([seq, features], verbose=0)[0]
    
    # Ajuste de temperatura para as probabilidades
    temperature = 0.7  # Controla a "criatividade" das previs√µes
    adjusted_pred = np.log(raw_pred + 1e-10) / temperature
    adjusted_pred = np.exp(adjusted_pred)
    adjusted_pred /= adjusted_pred.sum()
    
    # P√≥s-processamento inteligente
    weighted_pred = []
    for num in range(NUM_TOTAL):
        # Fator de frequ√™ncia (peso exponencial)
        freq_factor = 1 + np.exp(Counter(history[-100:]).get(num, 0)/3 - 1)
        
        # Fator de dist√¢ncia f√≠sica
        if history[-1] in WHEEL_ORDER and num in WHEEL_ORDER:
            distance = WHEEL_DISTANCE[history[-1]][num]
            distance_factor = 2.5 - (distance / 12)
        else:
            distance_factor = 1.0
            
        # Fator de momentum
        if len(history) > 3:
            momentum = sum(1 for i in range(1,4) if history[-i] == num)
            momentum_factor = 1 + momentum*0.3
        else:
            momentum_factor = 1.0
            
        weighted_pred.append(adjusted_pred[num] * freq_factor * distance_factor * momentum_factor)
    
    weighted_pred = np.array(weighted_pred)
    weighted_pred /= weighted_pred.sum()
    
    # Seleciona apenas n√∫meros com confian√ßa significativa
    confidence_threshold = 0.07  # 7% de confian√ßa m√≠nima
    top_numbers = [(i, weighted_pred[i]) for i in np.argsort(weighted_pred)[-5:][::-1] 
                  if weighted_pred[i] >= confidence_threshold]
    
    return top_numbers

def get_optimal_neighbors(number, confidence, history):
    """Calcula a estrat√©gia √≥tima de vizinhos baseada em confian√ßa e hist√≥rico"""
    if number not in WHEEL_ORDER:
        return []
    
    # Calcula quantidade din√¢mica de vizinhos
    base_neighbors = min(int(confidence * 15), 4)  # M√°ximo 4 vizinhos
    
    # Ajusta baseado na volatilidade recente
    volatility = np.std([WHEEL_ORDER.index(n) for n in history[-10:] if n in WHEEL_ORDER])/18 if len(history) > 10 else 0.5
    neighbor_count = max(1, min(4, int(base_neighbors * (1 + volatility))))
    
    idx = WHEEL_ORDER.index(number)
    neighbors = []
    for i in range(1, neighbor_count + 1):
        neighbors.append(WHEEL_ORDER[(idx - i) % 37])
        neighbors.append(WHEEL_ORDER[(idx + i) % 37])
    
    # Remove duplicatas e o pr√≥prio n√∫mero
    return list(set(neighbors) - {number})

# --- INTERFACE DE ALTA EFICI√äNCIA ---
st.set_page_config(layout="centered")
st.title("üî• ROULETTE AI - PRECIS√ÉO EXTREMA")

# Entrada de dados simplificada
with st.form("number_input_form"):
    num_input = st.number_input("DIGITE O √öLTIMO N√öMERO (0-36) E PRESSIONE ENTER:", 
                              min_value=0, max_value=36, step=1,
                              key="current_number")
    submitted = st.form_submit_button("ANALISAR")
    
    if submitted and num_input is not None:
        st.session_state.history.append(num_input)
        
        # Treinamento cont√≠nuo do modelo
        if len(st.session_state.history) > SEQUENCE_LEN * 2:
            if st.session_state.model is None:
                st.session_state.model = build_deep_learning_model()
            
            with st.spinner("üß† APRENDENDO PADR√ïES COMPLEXOS..."):
                X_seq, X_feat, y = [], [], []
                for i in range(len(st.session_state.history) - SEQUENCE_LEN - 1):
                    seq = st.session_state.history[i:i+SEQUENCE_LEN]
                    X_seq.append(seq)
                    X_feat.append(get_advanced_features(seq))
                    y.append(st.session_state.history[i+SEQUENCE_LEN])
                
                X_seq = np.array(X_seq).reshape(-1, SEQUENCE_LEN, 1)
                X_feat = np.array(X_feat)
                y = tf.keras.utils.to_categorical(y, NUM_TOTAL)
                
                # Treino com callbacks avan√ßados
                st.session_state.model.fit(
                    [X_seq, X_feat], y,
                    epochs=25,
                    batch_size=32,
                    verbose=0,
                    callbacks=[
                        EarlyStopping(patience=3, restore_best_weights=True),
                        ReduceLROnPlateau(factor=0.5, patience=2)
                    ]
                )

# --- PAINEL DE PREDI√á√ïES ---
if len(st.session_state.history) >= SEQUENCE_LEN:
    if st.session_state.model is None:
        st.session_state.model = build_deep_learning_model()
    
    predictions = predict_next_numbers(st.session_state.model, st.session_state.history)
    
    if predictions:
        st.subheader("üéØ ESTRAT√âGIA √ìTIMA DE APOSTAS")
        
        # Exibe cada previs√£o com estrat√©gia calculada
        for num, confidence in predictions:
            neighbors = get_optimal_neighbors(num, confidence, st.session_state.history)
            
            with st.container():
                cols = st.columns([1, 3])
                cols[0].metric(label=f"N√öMERO PRIM√ÅRIO", 
                              value=f"{num}", 
                              delta=f"CONFIAN√áA: {confidence:.1%}")
                
                if neighbors:
                    cols[1].write(f"**VIZINHOS ESTRAT√âGICOS ({len(neighbors)}):**")
                    neighbor_cols = st.columns(len(neighbors))
                    for i, neighbor in enumerate(neighbors):
                        neighbor_cols[i].metric(label="", value=neighbor)
                else:
                    cols[1].warning("ALTA CONFIAN√áA - JOGAR APENAS O N√öMERO PRIM√ÅRIO")
                
                st.progress(float(confidence))
            
            # Atualiza estat√≠sticas
            if len(st.session_state.history) > SEQUENCE_LEN:
                last_num = st.session_state.history[-1]
                if num == last_num:
                    st.session_state.stats['acertos'] += 1
                    st.session_state.stats['streak'] += 1
                    st.session_state.stats['max_streak'] = max(
                        st.session_state.stats['max_streak'],
                        st.session_state.stats['streak']
                    )
                else:
                    st.session_state.stats['streak'] = 0
                st.session_state.stats['total'] += 1

# --- PAINEL DE PERFORMANCE ---
if st.session_state.stats['total'] > 0:
    st.subheader("üìä DESEMPENHO DO SISTEMA")
    
    accuracy = st.session_state.stats['acertos'] / st.session_state.stats['total']
    expected = st.session_state.stats['total'] * (3/37)  # Baseline de 3 n√∫meros
    
    col1, col2, col3 = st.columns(3)
    col1.metric("ACERTOS", st.session_state.stats['acertos'])
    col2.metric("PRECIS√ÉO", f"{accuracy:.1%}", 
               f"{(accuracy/(3/37)-1):.0%} acima do esperado")
    col3.metric("SEQU√äNCIA", f"{st.session_state.stats['streak']}", 
               f"M√°x: {st.session_state.stats['max_streak']}")

# --- HIST√ìRICO COMPACTO ---
if st.session_state.history:
    st.subheader("√öLTIMOS N√öMEROS")
    history_text = " ‚Üí ".join(map(str, st.session_state.history[-20:]))
    st.write(history_text)
    
    # An√°lise de padr√µes
    if len(st.session_state.history) > 10:
        last_10 = st.session_state.history[-10:]
        repeats = sum(1 for i in range(1, len(last_10)) if last_10[i] == last_10[i-1] else 0
        changes = len(set(last_10))
        
        st.caption(f"üîç Padr√µes: {repeats} repeti√ß√µes | {changes} n√∫meros distintos")

# --- OTIMIZA√á√ÉO CONT√çNUA ---
if st.session_state.model and len(st.session_state.history) > 50:
    with st.expander("‚öôÔ∏è OTIMIZA√á√ÉO AVAN√áADA"):
        st.write("**Status do Modelo:**")
        st.json({
            "Tamanho do Hist√≥rico": len(st.session_state.history),
            "Taxa de Acerto": f"{accuracy:.2%}",
            "N√∫meros Analisados": SEQUENCE_LEN,
            "Arquitetura": "LSTM Profunda (256-128-64) + Aten√ß√£o"
        })
        
        if st.button("OTIMIZAR MODELO"):
            with st.spinner("REOTIMIZANDO REDE NEURAL..."):
                st.session_state.model = build_deep_learning_model()
                st.success("Modelo refor√ßado com sucesso!")
